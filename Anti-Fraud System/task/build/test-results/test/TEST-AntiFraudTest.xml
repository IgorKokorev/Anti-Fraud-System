<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="AntiFraudTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2023-06-07T14:03:43" hostname="IKOKSHP" time="45.525">
  <properties/>
  <testcase name="start" classname="AntiFraudTest" time="45.525"/>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
?[0;34m
?[0m?[0;34m  .   ____          _            __ _ _
?[0m?[0;34m /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
?[0m?[0;34m( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
?[0m?[0;34m \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
?[0m?[0;34m  '  |____| .__|_| |_|_| |_\__, | / / / /
?[0m?[0;34m =========|_|==============|___/=/_/_/_/
?[0m?[0;34m :: Spring Boot ::                (v2.7.0)
?[0m?[0;34m
?[0m?[0;34m2023-06-07 16:03:44.735  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication using Java 17.0.6 on iKoksHP with PID 14068 (started by ikoko in E:\OneDrive\Coding\Anti-Fraud System1\Anti-Fraud System\task)
?[0m?[0;34m2023-06-07 16:03:44.739  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to 1 default profile: "default"
?[0m?[0;34m2023-06-07 16:03:46.081  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
?[0m?[0;34m2023-06-07 16:03:46.174  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 78 ms. Found 5 JPA repository interfaces.
?[0m?[0;34m2023-06-07 16:03:47.053  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
?[0m?[0;34m2023-06-07 16:03:47.067  INFO 14068 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
?[0m?[0;34m2023-06-07 16:03:47.068  INFO 14068 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.63]
?[0m?[0;34m2023-06-07 16:03:47.195  INFO 14068 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
?[0m?[0;34m2023-06-07 16:03:47.195  INFO 14068 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2412 ms
?[0m?[0;34m2023-06-07 16:03:47.411  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
?[0m?[0;34m2023-06-07 16:03:47.763  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
?[0m?[0;34m2023-06-07 16:03:47.789  INFO 14068 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:../service_db'
?[0m?[0;34m2023-06-07 16:03:48.046  INFO 14068 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
?[0m?[0;34m2023-06-07 16:03:48.154  INFO 14068 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.6.9.Final
?[0m?[0;34m2023-06-07 16:03:48.460  INFO 14068 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
?[0m?[0;34m2023-06-07 16:03:48.678  INFO 14068 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
?[0m?[0;34mHibernate: create table card_limits (id bigint generated by default as identity, max_allowed bigint not null, max_manual bigint not null, number varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: create table stolencards (id bigint generated by default as identity, number varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: create table suspiciousips (id bigint generated by default as identity, ip varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: create table transactions (id bigint generated by default as identity, amount bigint not null, date timestamp not null, feedback varchar(255), ip varchar(255) not null, number varchar(255) not null, region varchar(255) not null, result integer not null, primary key (id))
?[0m?[0;34mHibernate: create table users (id bigint generated by default as identity, is_non_locked boolean not null, name varchar(255) not null, password varchar(255) not null, role varchar(255) not null, username varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: alter table card_limits drop constraint if exists UK_lmrf66khitqjdiyxhpoic2gx7
?[0m?[0;34mHibernate: alter table card_limits add constraint UK_lmrf66khitqjdiyxhpoic2gx7 unique (number)
?[0m?[0;34mHibernate: alter table stolencards drop constraint if exists UK_by7pq2qj2qe2qssjtvt8aakft
?[0m?[0;34mHibernate: alter table stolencards add constraint UK_by7pq2qj2qe2qssjtvt8aakft unique (number)
?[0m?[0;34mHibernate: alter table suspiciousips drop constraint if exists UK_bv2e0w3w3i4bg4gsuv1nr5ubl
?[0m?[0;34mHibernate: alter table suspiciousips add constraint UK_bv2e0w3w3i4bg4gsuv1nr5ubl unique (ip)
?[0m?[0;34m2023-06-07 16:03:49.537  INFO 14068 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
?[0m?[0;34m2023-06-07 16:03:49.547  INFO 14068 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-07 16:03:50.089  WARN 14068 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
?[0m?[0;34m2023-06-07 16:03:50.483  INFO 14068 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@235dacd7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74070994, org.springframework.security.web.context.SecurityContextPersistenceFilter@28200d43, org.springframework.security.web.header.HeaderWriterFilter@7f7f544a, org.springframework.security.web.authentication.logout.LogoutFilter@62376bdd, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6dc5e857, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@38318d67, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71db6703, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7c816f46, org.springframework.security.web.session.SessionManagementFilter@725490dd, org.springframework.security.web.access.ExceptionTranslationFilter@7ff7e353, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@14b4b25e]
?[0m?[0;34m2023-06-07 16:03:51.264  INFO 14068 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
?[0m?[0;34m2023-06-07 16:03:51.352  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
?[0m?[0;34m2023-06-07 16:03:51.371  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 7.094 seconds (JVM running for 8.033)
?[0m?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "password": "oa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
?[0m?[0;34m-----
?[0;34m2023-06-07 16:03:51.780  INFO 14068 --- [io-28852-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:03:51.781  INFO 14068 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:03:51.782  INFO 14068 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
?[0m?[1;31m
Start test 2?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 2",
?[0m?[0;34m   "username": "johndoe1"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 3?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 4?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 5?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 6?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 7?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with incorrect credentials is not allowed'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 8?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with incorrect credentials is not allowed'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 9?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Merchant after registration must be LOCKED'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 10?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe1 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 11?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 12?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history'
?[0m?[0;34mExpectations: 'User johndoe1 must be unlocked.Endpoint must respond with the HTTP OK status (200) and empty array in case if history is empty.'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[1;31m
Start test 13?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 14?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe1 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 15?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 16?[0m
?[0;34m2023-06-07 16:03:54.081  INFO 14068 --- [       Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-07 16:03:54.085  INFO 14068 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
?[0m?[0;34m2023-06-07 16:03:54.176  INFO 14068 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
?[0;34m
?[0m?[0;34m  .   ____          _            __ _ _
?[0m?[0;34m /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
?[0m?[0;34m( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
?[0m?[0;34m \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
?[0m?[0;34m  '  |____| .__|_| |_|_| |_\__, | / / / /
?[0m?[0;34m =========|_|==============|___/=/_/_/_/
?[0m?[0;34m :: Spring Boot ::                (v2.7.0)
?[0m?[0;34m
?[0m?[0;34m2023-06-07 16:04:04.539  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication using Java 17.0.6 on iKoksHP with PID 14068 (started by ikoko in E:\OneDrive\Coding\Anti-Fraud System1\Anti-Fraud System\task)
?[0m?[0;34m2023-06-07 16:04:04.539  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to 1 default profile: "default"
?[0m?[0;34m2023-06-07 16:04:05.098  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
?[0m?[0;34m2023-06-07 16:04:05.124  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26 ms. Found 5 JPA repository interfaces.
?[0m?[0;34m2023-06-07 16:04:05.261  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
?[0m?[0;34m2023-06-07 16:04:05.262  INFO 14068 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
?[0m?[0;34m2023-06-07 16:04:05.263  INFO 14068 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.63]
?[0m?[0;34m2023-06-07 16:04:05.306  INFO 14068 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
?[0m?[0;34m2023-06-07 16:04:05.306  INFO 14068 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 763 ms
?[0m?[0;34m2023-06-07 16:04:05.379  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
?[0m?[0;34m2023-06-07 16:04:05.410  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
?[0m?[0;34m2023-06-07 16:04:05.410  INFO 14068 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:../service_db'
?[0m?[0;34m2023-06-07 16:04:05.506  INFO 14068 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
?[0m?[0;34m2023-06-07 16:04:05.517  INFO 14068 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
?[0m?[0;34m2023-06-07 16:04:05.652  INFO 14068 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
?[0m?[0;34m2023-06-07 16:04:05.653  INFO 14068 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-07 16:04:05.740  WARN 14068 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
?[0m?[0;34m2023-06-07 16:04:05.848  INFO 14068 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4aa4bfa1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2100d881, org.springframework.security.web.context.SecurityContextPersistenceFilter@4ee9daf5, org.springframework.security.web.header.HeaderWriterFilter@c54e23b, org.springframework.security.web.authentication.logout.LogoutFilter@168ffb0, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@ca90087, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@291fba9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@29ff84fa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@59881424, org.springframework.security.web.session.SessionManagementFilter@7fdaeb6b, org.springframework.security.web.access.ExceptionTranslationFilter@4b90f49d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@44189797]
?[0m?[0;34m2023-06-07 16:04:06.167  INFO 14068 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
?[0m?[0;34m2023-06-07 16:04:06.222  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
?[0m?[0;34m2023-06-07 16:04:06.228  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.72 seconds (JVM running for 22.891)
?[0m?[1;31m
Start test 17?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'After restart user must exist'
?[0m?[0;34m-----
?[0;34m2023-06-07 16:04:06.242  INFO 14068 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:04:06.243  INFO 14068 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:04:06.244  INFO 14068 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 18?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of an attempt to register an existing user, endpoint must respond with HTTP CONFLICT status (409).'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 19?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 2",
?[0m?[0;34m   "username": "johndoe2",
?[0m?[0;34m   "password": "oMoa5VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 20?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 21?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 199'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 22?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 200'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 23?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 201'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 24?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1499'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 25?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1500'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 26?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1501'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'PROHIBITED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 27?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 2000'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'PROHIBITED''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 28?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = -1'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 29?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 0'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 30?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = null'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 31?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = ""'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 32?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = " "'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 33?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'empty body'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 34?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '/api/auth/user/somebody'
?[0m?[0;34mExpectations: 'If a user is not found, respond with HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 35?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '/api/auth/user/johndoe1'
?[0m?[0;34mExpectations: 'The endpoint must delete the user and respond with HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: delete from users where id=?
?[0m?[1;31m
Start test 36?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'User 'johndoe1' must be delete'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 37?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a user is not found, endpoint must respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 38?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role is not found, endpoint must respond with the HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 39?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role is ADMINISTRATOR, endpoint must respond with the HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 40?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 41?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role already assigned to a user, endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 42?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe2 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 43?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Role for user 'johndoe2' must be changed to SUPPORT'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 44?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Role MERCHANT must be removed from user johndoe2!'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 45?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 3",
?[0m?[0;34m   "username": "johndoe3",
?[0m?[0;34m   "password": "oMoa6VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 46?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'MERCHANT user after registration must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 47?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 48?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 49?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 50?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe3 must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 51?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 52?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 53?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role SUPPORT must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 54?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 55?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 56?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role SUPPORT must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 57?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 58?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to /api/auth/list'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 59?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to /api/auth/list'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 60?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 61?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 62?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 63?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 64?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 65?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 66?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 67?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 68?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 69?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 70?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 71?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 72?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'Endpoint must respond with empty array'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 73?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 74?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP already in database,  endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[1;31m
Start test 75?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 76?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 77?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 78?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'Endpoint must responds with Black List'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 79?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: delete from suspiciousips where id=?
?[0m?[1;31m
Start test 80?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP not found in database, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[1;31m
Start test 81?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 82?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 83?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Endpoint must respond with empty array'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 84?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 85?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number already in database, endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[1;31m
Start test 86?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 87?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If checksum of card-number is wrong, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 88?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 89?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Endpoint must responds with Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 90?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 91?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number not found in database, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[1;31m
Start test 92?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 93?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 94?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - suspicious ip reason'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 95?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - stolen card reason'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 96?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - stolen card, suspicious ip reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 97?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, stolen card, suspicious ip reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 98?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 99?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 100?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 101?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING due to - ip correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 102?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - ip correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 103?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 104?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 105?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, ip-correlation reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 106?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 107?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: delete from suspiciousips where id=?
?[0m?[1;31m
Start test 108?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 109?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 110?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 111?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING due to - region correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 112?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - region correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 113?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 114?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 115?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, region-correlation reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 116?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 117?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000004938320896'
?[0m?[0;34mExpectations: 'If transactions for specified card number is not found in database, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.number=? order by transactio0_.id asc
?[0m?[1;31m
Start test 118?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000008449433402'
?[0m?[0;34mExpectations: 'If card-number doesn't have right format (Luhn algo), respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 119?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[1;31m
Start test 120?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[1;31m
Start test 121?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[1;31m
Start test 122?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If transaction is not found in history, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[1;31m
Start test 123?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to PUT /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[1;31m
Start test 124?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to PUT /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 125?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to PUT /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 126?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 127?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000003305160034'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 128?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 129?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000003305160034'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 130?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 131?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000003305160034'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/history'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 132?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history'
?[0m?[0;34mExpectations: 'Endpoint must respond with the HTTP OK status (200) and body with array of JSON objects representing transactions, sorted by id in ascending order'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[1;31m
Start test 133?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/history/4000003305160034'
?[0m?[0;34mExpectations: 'If transactions for specified card number is found, respond with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.number=? order by transactio0_.id asc
?[0m?[1;31m
Start test 134?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 135?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: insert into card_limits (id, max_allowed, max_manual, number) values (default, ?, ?, ?)
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 136?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If feedback for specified transaction is already in database, respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[1;31m
Start test 137?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'If feedback doesn't have right format (ALLOWED, MANUAL_PROCESSING, PROHIBITED), respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34m2023-06-07 16:04:15.526  WARN 14068 --- [o-28852-exec-15] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `antifraud.config.TransactionResult` from String "ALLOWEDD": not one of the values accepted for Enum class: [ALLOWED, MANUAL_PROCESSING, PROHIBITED]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `antifraud.config.TransactionResult` from String "ALLOWEDD": not one of the values accepted for Enum class: [ALLOWED, MANUAL_PROCESSING, PROHIBITED]<EOL> at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 32] (through reference chain: antifraud.DTORequests.FeedbackRequest["feedback"])]
?[0m?[1;31m
Start test 138?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 202, Manual = 1500. Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 139?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 140?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: update card_limits set max_allowed=?, max_manual=?, number=? where id=?
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 141?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 202, Manual = 1160. Transaction must be PROHIBITED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 142?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 143?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: update card_limits set max_allowed=?, max_manual=?, number=? where id=?
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 144?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 162, Manual = 1160. Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 145?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 146?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: update card_limits set max_allowed=?, max_manual=?, number=? where id=?
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 147?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 130, Manual = 928. Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 148?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 130, Manual = 928. Transaction must be PROHIBITED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 149?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: update card_limits set max_allowed=?, max_manual=?, number=? where id=?
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 150?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 290, Manual = 929. Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 151?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 290, Manual = 929. Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 152?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'PROHIBITED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 153?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ order by transactio0_.id asc
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select transactio0_.id as id1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transactions transactio0_ where transactio0_.id=?
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: update card_limits set max_allowed=?, max_manual=?, number=? where id=?
?[0m?[0;34mHibernate: update transactions set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where id=?
?[0m?[1;31m
Start test 154?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 290, Manual = 930. Transaction must be MANUAL_PROCESSING'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 155?[0m
?[0;34m2023-06-07 16:04:17.721  INFO 14068 --- [       Thread-7] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-07 16:04:17.722  INFO 14068 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
?[0m?[0;34m2023-06-07 16:04:17.830  INFO 14068 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.
?[0;34m
?[0m?[0;34m  .   ____          _            __ _ _
?[0m?[0;34m /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
?[0m?[0;34m( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
?[0m?[0;34m \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
?[0m?[0;34m  '  |____| .__|_| |_|_| |_\__, | / / / /
?[0m?[0;34m =========|_|==============|___/=/_/_/_/
?[0m?[0;34m :: Spring Boot ::                (v2.7.0)
?[0m?[0;34m
?[0m?[0;34m2023-06-07 16:04:28.214  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication using Java 17.0.6 on iKoksHP with PID 14068 (started by ikoko in E:\OneDrive\Coding\Anti-Fraud System1\Anti-Fraud System\task)
?[0m?[0;34m2023-06-07 16:04:28.214  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to 1 default profile: "default"
?[0m?[0;34m2023-06-07 16:04:28.543  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
?[0m?[0;34m2023-06-07 16:04:28.562  INFO 14068 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18 ms. Found 5 JPA repository interfaces.
?[0m?[0;34m2023-06-07 16:04:28.655  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
?[0m?[0;34m2023-06-07 16:04:28.656  INFO 14068 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
?[0m?[0;34m2023-06-07 16:04:28.657  INFO 14068 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.63]
?[0m?[0;34m2023-06-07 16:04:28.687  INFO 14068 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
?[0m?[0;34m2023-06-07 16:04:28.687  INFO 14068 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 470 ms
?[0m?[0;34m2023-06-07 16:04:28.734  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
?[0m?[0;34m2023-06-07 16:04:28.750  INFO 14068 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
?[0m?[0;34m2023-06-07 16:04:28.751  INFO 14068 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:../service_db'
?[0m?[0;34m2023-06-07 16:04:28.793  INFO 14068 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
?[0m?[0;34m2023-06-07 16:04:28.800  INFO 14068 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
?[0m?[0;34m2023-06-07 16:04:28.897  INFO 14068 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
?[0m?[0;34m2023-06-07 16:04:28.898  INFO 14068 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-07 16:04:28.969  WARN 14068 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
?[0m?[0;34m2023-06-07 16:04:29.059  INFO 14068 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@339d5e8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3bd466bd, org.springframework.security.web.context.SecurityContextPersistenceFilter@1d4ee7d7, org.springframework.security.web.header.HeaderWriterFilter@26652743, org.springframework.security.web.authentication.logout.LogoutFilter@2bac4423, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@37acf9b1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d7e2c53, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@62ae5180, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1bbf7e81, org.springframework.security.web.session.SessionManagementFilter@8d56ddd, org.springframework.security.web.access.ExceptionTranslationFilter@59c530b5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@39e3da5a]
?[0m?[0;34m2023-06-07 16:04:29.271  INFO 14068 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
?[0m?[0;34m2023-06-07 16:04:29.293  INFO 14068 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
?[0m?[0;34m2023-06-07 16:04:29.299  INFO 14068 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.107 seconds (JVM running for 45.962)
?[0m?[1;31m
Start test 156?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Limits must be updated to: Allow = 290, Manual = 930. Transaction must be PROHIBITED'
?[0m?[0;34m-----
?[0;34m2023-06-07 16:04:29.303  INFO 14068 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:04:29.303  INFO 14068 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
?[0m?[0;34m2023-06-07 16:04:29.305  INFO 14068 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
?[0m?[0;34mHibernate: select userdb0_.id as id1_4_, userdb0_.is_non_locked as is_non_l2_4_, userdb0_.name as name3_4_, userdb0_.password as password4_4_, userdb0_.role as role5_4_, userdb0_.username as username6_4_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select cardlimits0_.id as id1_0_, cardlimits0_.max_allowed as max_allo2_0_, cardlimits0_.max_manual as max_manu3_0_, cardlimits0_.number as number4_0_ from card_limits cardlimits0_ where cardlimits0_.number=?
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, feedback, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
