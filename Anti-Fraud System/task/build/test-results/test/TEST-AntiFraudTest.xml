<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="AntiFraudTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2023-06-06T15:28:16" hostname="IKOKSHP" time="28.498">
  <properties/>
  <testcase name="start" classname="AntiFraudTest" time="28.498"/>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
?[0;34m
?[0m?[0;34m  .   ____          _            __ _ _
?[0m?[0;34m /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
?[0m?[0;34m( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
?[0m?[0;34m \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
?[0m?[0;34m  '  |____| .__|_| |_|_| |_\__, | / / / /
?[0m?[0;34m =========|_|==============|___/=/_/_/_/
?[0m?[0;34m :: Spring Boot ::                (v2.7.0)
?[0m?[0;34m
?[0m?[0;34m2023-06-06 17:28:16.830  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication using Java 17.0.6 on iKoksHP with PID 3588 (started by ikoko in E:\OneDrive\Coding\Anti-Fraud System1\Anti-Fraud System\task)
?[0m?[0;34m2023-06-06 17:28:16.834  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to 1 default profile: "default"
?[0m?[0;34m2023-06-06 17:28:18.516  INFO 3588 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
?[0m?[0;34m2023-06-06 17:28:18.612  INFO 3588 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 75 ms. Found 4 JPA repository interfaces.
?[0m?[0;34m2023-06-06 17:28:19.525  INFO 3588 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
?[0m?[0;34m2023-06-06 17:28:19.540  INFO 3588 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
?[0m?[0;34m2023-06-06 17:28:19.541  INFO 3588 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.63]
?[0m?[0;34m2023-06-06 17:28:19.679  INFO 3588 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
?[0m?[0;34m2023-06-06 17:28:19.680  INFO 3588 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2799 ms
?[0m?[0;34m2023-06-06 17:28:19.861  INFO 3588 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
?[0m?[0;34m2023-06-06 17:28:20.206  INFO 3588 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
?[0m?[0;34m2023-06-06 17:28:20.230  INFO 3588 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:../service_db'
?[0m?[0;34m2023-06-06 17:28:20.438  INFO 3588 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
?[0m?[0;34m2023-06-06 17:28:20.532  INFO 3588 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.6.9.Final
?[0m?[0;34m2023-06-06 17:28:20.789  INFO 3588 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
?[0m?[0;34m2023-06-06 17:28:21.020  INFO 3588 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
?[0m?[0;34mHibernate: create table stolencards (id bigint generated by default as identity, number varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: create table suspiciousips (id bigint generated by default as identity, ip varchar(255) not null, primary key (id))
?[0m?[0;34mHibernate: create table transactions (id bigint generated by default as identity, amount bigint not null, date timestamp not null, info varchar(255) not null, ip varchar(255) not null, number varchar(255) not null, region varchar(255) not null, result integer not null, primary key (id))
?[0m?[0;34mHibernate: create table users (id bigint generated by default as identity, is_non_locked boolean not null, name varchar(255) not null, password varchar(255) not null, role varchar(255) not null, username varchar(255) not null, primary key (id))
?[0m?[0;34m2023-06-06 17:28:21.854  INFO 3588 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
?[0m?[0;34m2023-06-06 17:28:21.863  INFO 3588 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-06 17:28:22.354  WARN 3588 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
?[0m?[0;34m2023-06-06 17:28:22.720  INFO 3588 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7205a8b7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1ee126de, org.springframework.security.web.context.SecurityContextPersistenceFilter@7343d843, org.springframework.security.web.header.HeaderWriterFilter@73c1dda3, org.springframework.security.web.authentication.logout.LogoutFilter@684bfba9, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@52afcdd8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@619b7436, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@725490dd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@22cce199, org.springframework.security.web.session.SessionManagementFilter@309d54ac, org.springframework.security.web.access.ExceptionTranslationFilter@2d2fe68a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@639bf405]
?[0m?[0;34m2023-06-06 17:28:23.414  INFO 3588 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
?[0m?[0;34m2023-06-06 17:28:23.465  INFO 3588 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
?[0m?[0;34m2023-06-06 17:28:23.480  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 7.123 seconds (JVM running for 8.042)
?[0m?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "password": "oa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
?[0m?[0;34m-----
?[0;34m2023-06-06 17:28:23.841  INFO 3588 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
?[0m?[0;34m2023-06-06 17:28:23.842  INFO 3588 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
?[0m?[0;34m2023-06-06 17:28:23.844  INFO 3588 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
?[0m?[1;31m
Start test 2?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 2",
?[0m?[0;34m   "username": "johndoe1"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 3?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 4?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 5?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 6?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 7?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with incorrect credentials is not allowed'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 8?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with incorrect credentials is not allowed'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 9?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Merchant after registration must be LOCKED'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 10?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe1 must be UNLOCKED'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 11?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe1 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 12?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 13?[0m
?[0;34m2023-06-06 17:28:25.816  INFO 3588 --- [       Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-06 17:28:25.821  INFO 3588 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
?[0m?[0;34m2023-06-06 17:28:25.904  INFO 3588 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
?[0;34m
?[0m?[0;34m  .   ____          _            __ _ _
?[0m?[0;34m /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
?[0m?[0;34m( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
?[0m?[0;34m \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
?[0m?[0;34m  '  |____| .__|_| |_|_| |_\__, | / / / /
?[0m?[0;34m =========|_|==============|___/=/_/_/_/
?[0m?[0;34m :: Spring Boot ::                (v2.7.0)
?[0m?[0;34m
?[0m?[0;34m2023-06-06 17:28:36.291  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication using Java 17.0.6 on iKoksHP with PID 3588 (started by ikoko in E:\OneDrive\Coding\Anti-Fraud System1\Anti-Fraud System\task)
?[0m?[0;34m2023-06-06 17:28:36.291  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to 1 default profile: "default"
?[0m?[0;34m2023-06-06 17:28:36.627  INFO 3588 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
?[0m?[0;34m2023-06-06 17:28:36.641  INFO 3588 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
?[0m?[0;34m2023-06-06 17:28:36.741  INFO 3588 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
?[0m?[0;34m2023-06-06 17:28:36.743  INFO 3588 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
?[0m?[0;34m2023-06-06 17:28:36.743  INFO 3588 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.63]
?[0m?[0;34m2023-06-06 17:28:36.779  INFO 3588 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
?[0m?[0;34m2023-06-06 17:28:36.779  INFO 3588 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 485 ms
?[0m?[0;34m2023-06-06 17:28:36.820  INFO 3588 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
?[0m?[0;34m2023-06-06 17:28:36.840  INFO 3588 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
?[0m?[0;34m2023-06-06 17:28:36.840  INFO 3588 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:../service_db'
?[0m?[0;34m2023-06-06 17:28:36.886  INFO 3588 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
?[0m?[0;34m2023-06-06 17:28:36.894  INFO 3588 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
?[0m?[0;34m2023-06-06 17:28:36.984  INFO 3588 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
?[0m?[0;34m2023-06-06 17:28:36.984  INFO 3588 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
?[0m?[0;34m2023-06-06 17:28:37.067  WARN 3588 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
?[0m?[0;34m2023-06-06 17:28:37.140  INFO 3588 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6bd5aa8b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3af17313, org.springframework.security.web.context.SecurityContextPersistenceFilter@348d1a5e, org.springframework.security.web.header.HeaderWriterFilter@2aa85cc4, org.springframework.security.web.authentication.logout.LogoutFilter@730a140b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2f29046b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f746160, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@17524c36, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1737acc0, org.springframework.security.web.session.SessionManagementFilter@466fd19b, org.springframework.security.web.access.ExceptionTranslationFilter@1495f70, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@62f8b2f4]
?[0m?[0;34m2023-06-06 17:28:37.336  INFO 3588 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
?[0m?[0;34m2023-06-06 17:28:37.354  INFO 3588 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
?[0m?[0;34m2023-06-06 17:28:37.361  INFO 3588 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.094 seconds (JVM running for 21.923)
?[0m?[1;31m
Start test 14?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'After restart user must exist'
?[0m?[0;34m-----
?[0;34m2023-06-06 17:28:37.370  INFO 3588 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
?[0m?[0;34m2023-06-06 17:28:37.370  INFO 3588 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
?[0m?[0;34m2023-06-06 17:28:37.372  INFO 3588 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 15?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 1",
?[0m?[0;34m   "username": "johndoe1",
?[0m?[0;34m   "password": "oMoa3VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'In case of an attempt to register an existing user, endpoint must respond with HTTP CONFLICT status (409).'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 16?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 2",
?[0m?[0;34m   "username": "johndoe2",
?[0m?[0;34m   "password": "oMoa5VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 17?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 18?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 199'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 19?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 200'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'ALLOWED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 20?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 201'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 21?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1499'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 22?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1500'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 23?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 1501'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'PROHIBITED''
?[0m?[0;34m-----
?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 24?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 2000'
?[0m?[0;34mExpectations: 'Result validating of Transaction must be 'PROHIBITED''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 25?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = -1'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 26?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = 0'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 27?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = null'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 28?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = ""'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 29?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'amount = " "'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 30?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mrequest: 'empty body'
?[0m?[0;34mExpectations: 'Response status must be 'Bad request''
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 31?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '/api/auth/user/somebody'
?[0m?[0;34mExpectations: 'If a user is not found, respond with HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 32?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '/api/auth/user/johndoe1'
?[0m?[0;34mExpectations: 'The endpoint must delete the user and respond with HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: delete from users where id=?
?[0m?[1;31m
Start test 33?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'User 'johndoe1' must be delete'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 34?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a user is not found, endpoint must respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 35?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role is not found, endpoint must respond with the HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 36?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role is ADMINISTRATOR, endpoint must respond with the HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 37?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 38?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/role'
?[0m?[0;34mExpectations: 'If a role already assigned to a user, endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 39?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe2 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 40?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'Role for user 'johndoe2' must be changed to SUPPORT'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ order by userdb0_.id asc
?[0m?[1;31m
Start test 41?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Role MERCHANT must be removed from user johndoe2!'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 42?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mrequest: '{
?[0m?[0;34m   "name": "John Doe 3",
?[0m?[0;34m   "username": "johndoe3",
?[0m?[0;34m   "password": "oMoa6VvqnLxW"
?[0m?[0;34m}'
?[0m?[0;34mExpectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select count(*) as col_0_0_ from users userdb0_
?[0m?[0;34mHibernate: insert into users (id, is_non_locked, name, password, role, username) values (default, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 43?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'MERCHANT user after registration must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 44?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 45?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 46?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 47?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user johndoe3 must be LOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 48?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/access'
?[0m?[0;34mExpectations: 'A user johndoe3 must be UNLOCKED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: update users set is_non_locked=?, name=?, password=?, role=?, username=? where id=?
?[0m?[1;31m
Start test 49?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 50?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role SUPPORT must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 51?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to /api/antifraud/transaction'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 52?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 53?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role SUPPORT must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 54?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/user'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/auth/user'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 55?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with role ANONYMOUS must not have access to /api/auth/list'
?[0m?[0;34m-----
?[0m?[1;31m
Start test 56?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/auth/list'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to /api/auth/list'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 57?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 58?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 59?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 60?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 61?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 62?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/suspicious-ip'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 63?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 64?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 65?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 66?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 67?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 68?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/stolencard'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 69?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'Endpoint must respond with empty array'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 70?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 71?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP already in database,  endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[1;31m
Start test 72?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 73?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 74?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 75?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'Endpoint must responds with Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 76?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: delete from suspiciousips where id=?
?[0m?[1;31m
Start test 77?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP not found in database, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[1;31m
Start test 78?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 79?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ order by suspicious0_.id asc
?[0m?[1;31m
Start test 80?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Endpoint must respond with empty array'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 81?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 82?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number already in database, endpoint must respond with the HTTP Conflict status (409).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[1;31m
Start test 83?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 84?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If checksum of card-number is wrong, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 85?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 86?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Endpoint must responds with Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 87?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 88?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number not found in database, respond with the HTTP Not Found status (404).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[1;31m
Start test 89?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[1;31m
Start test 90?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ order by stolencard0_.id asc
?[0m?[1;31m
Start test 91?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - suspicious ip reason'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 92?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - stolen card reason'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 93?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - stolen card, suspicious ip reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 94?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, stolen card, suspicious ip reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 95?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 96?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 97?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 98?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING due to - ip correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 99?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - ip correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 100?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 101?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 102?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, ip-correlation reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 103?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 104?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: delete from suspiciousips where id=?
?[0m?[1;31m
Start test 105?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 106?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 107?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be ALLOWED'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 108?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING due to - region correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 109?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - region correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 110?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'A card must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: insert into stolencards (id, number) values (default, ?)
?[0m?[1;31m
Start test 111?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/suspicious-ip'
?[0m?[0;34mExpectations: 'IP must be added to Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select suspicious0_.id as id1_1_, suspicious0_.ip as ip2_1_ from suspiciousips suspicious0_ where suspicious0_.ip=?
?[0m?[0;34mHibernate: insert into suspiciousips (id, ip) values (default, ?)
?[0m?[1;31m
Start test 112?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, region-correlation reasons'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m?[1;31m
Start test 113?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/stolencard'
?[0m?[0;34mExpectations: 'Card must be removed from Black List'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as id1_0_, stolencard0_.number as number2_0_ from stolencards stolencard0_ where stolencard0_.number=?
?[0m?[0;34mHibernate: delete from stolencards where id=?
?[0m?[1;31m
Start test 114?[0m
?[0;34mTest case
?[0m?[0;34mTesting api: '/api/antifraud/transaction'
?[0m?[0;34mExpectations: 'Transaction must be MANUAL_PROCESSING due to - ip correlation rule'
?[0m?[0;34m-----
?[0m?[0;34mHibernate: select userdb0_.id as id1_3_, userdb0_.is_non_locked as is_non_l2_3_, userdb0_.name as name3_3_, userdb0_.password as password4_3_, userdb0_.role as role5_3_, userdb0_.username as username6_3_ from users userdb0_ where upper(userdb0_.username)=upper(?)
?[0m?[0;34mHibernate: select stolencard0_.id as col_0_0_ from stolencards stolencard0_ where stolencard0_.number=? limit ?
?[0m?[0;34mHibernate: select suspicious0_.id as col_0_0_ from suspiciousips suspicious0_ where suspicious0_.ip=? limit ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT ip) FROM transactions WHERE ip != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: SELECT COUNT (DISTINCT region) FROM transactions WHERE region != ? AND number = ? AND date > ? AND date < ?
?[0m?[0;34mHibernate: insert into transactions (id, amount, date, info, ip, number, region, result) values (default, ?, ?, ?, ?, ?, ?, ?)
?[0m]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
